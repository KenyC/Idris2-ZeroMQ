#!/usr/bin/chezscheme9.5 --script

; @generated
(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")                           (load-shared-object "ws2_32.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (ash 1 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (ash 1 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (ash 1 bits))))
(define b/ (lambda (x y bits) (remainder (exact-floor (/ x y)) (ash 1 bits))))

(define integer->bits8 (lambda (x) (modulo x (expt 2 8))))
(define integer->bits16 (lambda (x) (modulo x (expt 2 16))))
(define integer->bits32 (lambda (x) (modulo x (expt 2 32))))
(define integer->bits64 (lambda (x) (modulo x (expt 2 64))))

(define bits16->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits64->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits32 (lambda (x) (modulo x (expt 2 32))))

(define blodwen-bits-shl (lambda (x y bits) (remainder (ash x y) (ash 1 bits))))
(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))
(define cast-string-int
  (lambda (x)
    (exact-floor (cast-num (string->number (destroy-prefix x))))))
(define cast-int-char
  (lambda (x)
    (if (and (>= x 0)
             (<= x #x10ffff))
        (integer->char x)
        0)))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))

(define (from-idris-list xs)
  (if (= (vector-ref xs 0) 0)
    '()
    (cons (vector-ref xs 1) (from-idris-list (vector-ref xs 2)))))
(define (string-pack xs) (apply string (from-idris-list xs)))
(define (to-idris-list-rev acc xs)
  (if (null? xs)
    acc
    (to-idris-list-rev (vector 1 (car xs) acc) (cdr xs))))
(define (string-unpack s) (to-idris-list-rev (vector 0) (reverse (string->list s))))
(define (string-concat xs) (apply string-append (from-idris-list xs)))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      (vector 0)  ; EOF
      (vector 1 (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t)
  (let ((sec (div t 1000000))
        (micro (mod t 1000000)))
  (condition-wait c m (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))
(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0) ; Prelude.List
        (vector 1 (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))
(define DataC-45Strings-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_socket (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris_zmq_socket" (void* int) void*) farg-0 farg-1)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_send (lambda (farg-0 farg-1 farg-2 farg-3) ((foreign-procedure #f "idris_zmq_send" (void* string int) int) farg-0 farg-1 farg-2)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_recv (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris_zmq_recv" (void* int) void*) farg-0 farg-1)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_ctx_new (lambda (farg-0) ((foreign-procedure #f "idris_zmq_ctx_new" () void*) )))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_ctx_destroy (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_zmq_ctx_destroy" (void*) void) farg-0) (vector 0 )))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_connect (lambda (farg-0 farg-1 farg-2 farg-3 farg-4) ((foreign-procedure #f "idris_zmq_connect" (void* string string int) int) farg-0 farg-1 farg-2 farg-3)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_close (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_zmq_close" (void*) void) farg-0) (vector 0 )))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_more_to_receive (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_more_to_receive" (void*) int) farg-0)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_get_result_code (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_get_result_code" (void*) int) farg-0)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_get_payload (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_get_payload" (void*) string) farg-0)))
(define NetworkC-45ZeroMQC-45Internal-prim__idris_free_recv_struct (lambda (farg-0 farg-1) ((foreign-procedure #f "idris_free_recv_struct" (void*) void) farg-0) (vector 0 )))
(define prim__add_Int (lambda (arg-0 arg-1) (b+ arg-0 arg-1 63)))
(define prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define prim__mul_Int (lambda (arg-0 arg-1) (b* arg-0 arg-1 63)))
(define prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define prim__div_Int (lambda (arg-0 arg-1) (b/ arg-0 arg-1 63)))
(define prim__mod_Int (lambda (arg-0 arg-1) (remainder arg-0 arg-1)))
(define prim__lt_Int (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_Integer (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lte_Int (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Integer (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__eq_Int (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Integer (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Char (lambda (arg-0 arg-1) (or (and (char=? arg-0 arg-1) 1) 0)))
(define prim__gte_Int (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Integer (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gt_Int (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Integer (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__strHead (lambda (arg-0) (string-ref arg-0 0)))
(define prim__strAppend (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define prim__believe_me (lambda (arg-0 arg-1 arg-2) arg-2))
(define prim__crash (lambda (arg-0 arg-1) (blodwen-error-quit (string-append "ERROR: " arg-1))))
(define prim__cast_IntString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_IntegerInt (lambda (arg-0) arg-0))
(define Main-case--main-2670 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "That is a problem")) (else (let ((e-5 (vector-ref sc0 1))) (PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7161) arg-7161))) (PreludeC-45TypesC-45Strings-C-43C-43 "Server says:" (DataC-45Strings-fastConcat e-5)))))))))
(define Main-protocol (lambda () (vector 0 )))
(define Main-port (lambda () 5555))
(define Main-main (lambda () (NetworkC-45ZeroMQ-withContext 'erased 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7161) arg-7161))) (lambda (context) (lambda (eta-0) (let ((act-24 ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-24 (arg-644 eta-1))) ((arg-645 act-24) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "Context Created") eta-0))) (let ((act-25 ((NetworkC-45ZeroMQ-socket 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-25 (arg-644 eta-1))) ((arg-645 act-25) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) context (vector 4 )) eta-0))) (let ((act-26 ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-26 (arg-644 eta-1))) ((arg-645 act-26) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "Socket Created") eta-0))) (let ((act-27 ((NetworkC-45ZeroMQ-connect 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-27 (arg-644 eta-1))) ((arg-645 act-27) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) act-25 (Main-protocol) (Main-address) (Main-port)) eta-0))) (let ((act-28 ((PreludeC-45Interfaces-when 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (PreludeC-45Basics-not act-27) (lambda () (PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-28 (arg-644 eta-1))) ((arg-645 act-28) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "Ohoh"))) eta-0))) (let ((act-29 ((NetworkC-45ZeroMQ-sendMany 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-29 (arg-644 eta-1))) ((arg-645 act-29) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) act-25 (vector 1 "Some tremendously interesting message" (vector 1 "of great length" (vector 0 ))) (vector 0 )) eta-0))) (let ((act-30 ((NetworkC-45ZeroMQ-recvMany 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-30 (arg-644 eta-1))) ((arg-645 act-30) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) act-25 (vector 0 )) eta-0))) (let ((act-31 (let ((sc0 act-30)) (case (vector-ref sc0 0) ((0) ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-31 (arg-644 eta-1))) ((arg-645 act-31) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "That is a problem") eta-0)) (else (let ((e-5 (vector-ref sc0 1))) ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-31 (arg-644 eta-1))) ((arg-645 act-31) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) (PreludeC-45TypesC-45Strings-C-43C-43 "Server says:" (DataC-45Strings-fastConcat e-5))) eta-0))))))) (let ((act-32 ((NetworkC-45ZeroMQ-close 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-32 (arg-644 eta-1))) ((arg-645 act-32) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) act-25) eta-0))) ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-33 (arg-644 eta-1))) ((arg-645 act-33) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7161) arg-7161))) "Socket Closed") eta-0)))))))))))))))
(define Main-address (lambda () (vector 0 127 0 0 1)))
(define PreludeC-45Basics-not (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1) (else 0)))))
(define PreludeC-45Basics-intToBool (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45Basics-id (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Basics-C-46 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (arg-3 (arg-4 ext-0))))
(define PreludeC-45Basics-C-38C-38 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else 1)))))
(define Builtin-snd (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define Builtin-idris_crash (lambda (arg-0 ext-0) (blodwen-error-quit (string-append "ERROR: " ext-0))))
(define Builtin-fst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define Builtin-believe_me (lambda (arg-0 arg-1 ext-0) ext-0))
(define Builtin-assert_total (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Types-case--max-765 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Types-case--min-751 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Types-case--prim__integerToNat-626 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (Builtin-believe_me 'erased 'erased arg-0)) (else 0)))))
(define PreludeC-45Types-pure_Applicative_C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 ext-0) (vector 1 ext-0)))
(define PreludeC-45Types-null_Foldable_List (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (lambda () 0)) (else (lambda () 1))))))
(define PreludeC-45Types-neutral_Monoid_String (lambda () ""))
(define PreludeC-45Types-min_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45Types-case--min-751 arg-1 arg-0 (PreludeC-45Types-C-60_Ord_Nat arg-0 arg-1))))
(define PreludeC-45Types-max_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45Types-case--max-765 arg-1 arg-0 (PreludeC-45Types-C-62_Ord_Nat arg-0 arg-1))))
(define PreludeC-45Types-map_Functor_List (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (arg-2 e-2) (PreludeC-45Types-map_Functor_List 'erased 'erased arg-2 e-3)))))))))
(define PreludeC-45Types-map_Functor_C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-3 e-5))))))))
(define PreludeC-45Types-foldr_Foldable_List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-2 e-2) (PreludeC-45Types-foldr_Foldable_List 'erased 'erased arg-2 arg-3 e-3)))))))))
(define PreludeC-45Types-foldl_Foldable_List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (PreludeC-45Types-foldl_Foldable_List 'erased 'erased arg-2 ((arg-2 arg-3) e-2) e-3))))))))
(define PreludeC-45Types-compare_Ord_Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 1)(else 0))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 2)(else (let ((e-2 (- arg-1 1))) (PreludeC-45Types-compare_Ord_Nat e-0 e-2)))))))))))
(define PreludeC-45Types-__Impl_Semigroup_String (lambda (ext-0 ext-1) (PreludeC-45Types-C-60C-43C-62_Semigroup_String ext-0 ext-1)))
(define PreludeC-45Types-__Impl_Ord_Nat (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-61C-61_Eq_Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-47C-61_Eq_Nat arg-4 arg-5)))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45Types-compare_Ord_Nat arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45Types-C-60_Ord_Nat arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45Types-C-62_Ord_Nat arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45Types-C-60C-61_Ord_Nat arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45Types-C-62C-61_Ord_Nat arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45Types-max_Ord_Nat arg-381 arg-382))) (lambda (arg-383) (lambda (arg-384) (PreludeC-45Types-min_Ord_Nat arg-383 arg-384))))))
(define PreludeC-45Types-__Impl_Monoid_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-60C-43C-62_Semigroup_String arg-2 arg-3))) (PreludeC-45Types-neutral_Monoid_String))))
(define PreludeC-45Types-__Impl_Functor_List (lambda (ext-0 ext-1 ext-2 ext-3) (PreludeC-45Types-map_Functor_List 'erased 'erased ext-2 ext-3)))
(define PreludeC-45Types-__Impl_Functor_C-40EitherC-32C-36eC-41 (lambda (arg-0 ext-0 ext-1 ext-2 ext-3) (let ((sc0 ext-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (ext-2 e-5))))))))
(define PreludeC-45Types-__Impl_Foldable_List (lambda () (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable_List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable_List 'erased 'erased func init input)))))) (lambda (elem) (lambda (arg-821) (PreludeC-45Types-null_Foldable_List 'erased arg-821))))))
(define PreludeC-45Types-__Impl_Eq_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-61C-61_Eq_Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-47C-61_Eq_Nat arg-4 arg-5))))))
(define PreludeC-45Types-__Impl_Applicative_C-40EitherC-32C-36eC-41 (lambda (arg-0) (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (let ((sc0 arg-149)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (func e-5)))))))))) (lambda (a) (lambda (arg-482) (vector 1 arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (let ((sc0 arg-483)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-485)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11))))))))))))))))
(define PreludeC-45Types-C-62_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq_Ordering (PreludeC-45Types-compare_Ord_Nat arg-0 arg-1) 2)))
(define PreludeC-45Types-C-62C-61_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq_Ordering (PreludeC-45Types-compare_Ord_Nat arg-0 arg-1) 0)))
(define PreludeC-45Types-C-61C-61_Eq_Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 1)(else (let ((e-1 (- arg-1 1))) (PreludeC-45Types-C-61C-61_Eq_Nat e-0 e-1)))))))))))
(define PreludeC-45Types-C-60_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq_Ordering (PreludeC-45Types-compare_Ord_Nat arg-0 arg-1) 0)))
(define PreludeC-45Types-C-60C-61_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq_Ordering (PreludeC-45Types-compare_Ord_Nat arg-0 arg-1) 2)))
(define PreludeC-45Types-C-60C-43C-62_Semigroup_String (lambda (ext-0 ext-1) (PreludeC-45TypesC-45Strings-C-43C-43 ext-0 ext-1)))
(define PreludeC-45Types-C-60C-42C-62_Applicative_C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PreludeC-45Types-C-47C-61_Eq_Nat (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45Types-C-61C-61_Eq_Nat arg-0 arg-1))))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (PreludeC-45Types-case--prim__integerToNat-626 arg-0 (let ((sc0 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc0 0) 1)(else 0))))))
(define PreludeC-45Types-either (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-4) e-5)))))))
(define PreludeC-45TypesC-45Strings-C-43C-43 (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define PreludeC-45Num-case--mod-460 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 1) (remainder arg-1 arg-0))(else (Builtin-idris_crash 'erased "Unhandled input for Prelude.Num.case block in mod at Prelude/Num.idr:116:3--118:40"))))))
(define PreludeC-45Num-case--div-441 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 1) (b/ arg-1 arg-0 63))(else (Builtin-idris_crash 'erased "Unhandled input for Prelude.Num.case block in div at Prelude/Num.idr:113:3--115:40"))))))
(define PreludeC-45Num-mod_Integral_Int (lambda (arg-0 arg-1) (PreludeC-45Num-case--mod-460 arg-1 arg-0 (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-1 0))))
(define PreludeC-45Num-fromInteger_Num_Int (lambda (ext-0) ext-0))
(define PreludeC-45Num-div_Integral_Int (lambda (arg-0 arg-1) (PreludeC-45Num-case--div-441 arg-1 arg-0 (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-1 0))))
(define PreludeC-45Num-C-43_Num_Int (lambda (ext-0 ext-1) (b+ ext-0 ext-1 63)))
(define PreludeC-45Num-C-42_Num_Int (lambda (ext-0 ext-1) (b* ext-0 ext-1 63)))
(define PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1309 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define PreludeC-45EqOrd-case--compare-1292 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1309 arg-0 arg-1 (PreludeC-45EqOrd-C-61C-61_Eq_Integer arg-1 arg-0)))))))
(define PreludeC-45EqOrd-case--max-1275 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-case--min-1261 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1195 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define PreludeC-45EqOrd-case--compare-1178 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1195 arg-0 arg-1 (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-1 arg-0)))))))
(define PreludeC-45EqOrd-case--max-1161 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-case--min-1147 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-min_Ord_Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--min-1261 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord_Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-min_Ord_Int (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--min-1147 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord_Int arg-0 arg-1))))
(define PreludeC-45EqOrd-max_Ord_Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--max-1275 arg-1 arg-0 (PreludeC-45EqOrd-C-62_Ord_Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-max_Ord_Int (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--max-1161 arg-1 arg-0 (PreludeC-45EqOrd-C-62_Ord_Int arg-0 arg-1))))
(define PreludeC-45EqOrd-compare_Ord_Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--compare-1292 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord_Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-compare_Ord_Int (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--compare-1178 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord_Int arg-0 arg-1))))
(define PreludeC-45EqOrd-__Impl_Ord_Integer (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq_Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq_Integer arg-4 arg-5)))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45EqOrd-compare_Ord_Integer arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45EqOrd-C-60_Ord_Integer arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45EqOrd-C-62_Ord_Integer arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45EqOrd-C-60C-61_Ord_Integer arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45EqOrd-C-62C-61_Ord_Integer arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45EqOrd-max_Ord_Integer arg-381 arg-382))) (lambda (arg-383) (lambda (arg-384) (PreludeC-45EqOrd-min_Ord_Integer arg-383 arg-384))))))
(define PreludeC-45EqOrd-__Impl_Ord_Int (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq_Int arg-4 arg-5)))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45EqOrd-compare_Ord_Int arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45EqOrd-C-60_Ord_Int arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45EqOrd-C-62_Ord_Int arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45EqOrd-C-60C-61_Ord_Int arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45EqOrd-C-62C-61_Ord_Int arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45EqOrd-max_Ord_Int arg-381 arg-382))) (lambda (arg-383) (lambda (arg-384) (PreludeC-45EqOrd-min_Ord_Int arg-383 arg-384))))))
(define PreludeC-45EqOrd-__Impl_Eq_Ordering (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq_Ordering arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq_Ordering arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Integer (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq_Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq_Integer arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq_Int arg-4 arg-5))))))
(define PreludeC-45EqOrd-C-62_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62C-61_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1)))) ((equal? sc0 2) (let ((sc1 arg-1)) (cond ((equal? sc1 2) 0)(else 1))))(else 1)))))
(define PreludeC-45EqOrd-C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60C-61_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq_Ordering arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq_Integer (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq_Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq_Int (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq_Int arg-0 arg-1))))
(define PreludeC-45EqOrd-compare (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-4 (vector-ref sc0 4))) (lambda (arg-2) (lambda (arg-3) ((e-4 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-61C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-60 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (lambda (arg-3) ((e-3 arg-2) arg-3)))))))
(define PreludeC-45Interfaces-__Monoid_C-40SemigroupC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-__Monad_C-40ApplicativeC-32mC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-__Applicative_C-40FunctorC-32fC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-when (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (arg-3)) (else (let ((sc1 arg-1)) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 )))))))))
(define PreludeC-45Interfaces-pure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define PreludeC-45Interfaces-neutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define PreludeC-45Interfaces-map (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) ((((arg-3 'erased) 'erased) ext-0) ext-1)))
(define PreludeC-45Interfaces-foldr (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define PreludeC-45Interfaces-foldl (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define PreludeC-45Interfaces-concat (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (lambda (arg-4) (lambda (arg-5) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-5 (vector-ref sc1 1))) ((e-5 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-4 (vector-ref sc1 2))) e-4))) arg-3))))))
(define PreludeC-45Interfaces-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) ((((e-2 'erased) 'erased) arg-4) arg-5)))))))
(define PreludeC-45Interfaces-C-60C-43C-62 (lambda (arg-0 arg-1 ext-0 ext-1) ((arg-1 ext-0) ext-1)))
(define PreludeC-45Interfaces-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-4) (lambda (arg-5) ((((e-3 'erased) 'erased) arg-4) arg-5)))))))
(define PreludeC-45Interfaces-C-60C-36C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) arg-4) arg-5)))
(define PrimIO-case--unsafePerformIO-531 (lambda (arg-0 arg-1 arg-2 arg-3) (PrimIO-unsafeDestroyWorld 'erased 'erased arg-3)))
(define PrimIO-case--caseC-32blockC-32inC-32io_bind-452 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (arg-7 arg-6)))
(define PrimIO-case--io_bind-430 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (PrimIO-case--caseC-32blockC-32inC-32io_bind-452 'erased 'erased 'erased 'erased 'erased arg-5 'erased (arg-3 arg-5))))
(define PrimIO-unsafePerformIO (lambda (arg-0 arg-1) (PrimIO-unsafeCreateWorld 'erased (lambda (w) (PrimIO-case--unsafePerformIO-531 'erased 'erased 'erased (arg-1 w))))))
(define PrimIO-unsafeDestroyWorld (lambda (arg-0 arg-1 arg-2) arg-2))
(define PrimIO-unsafeCreateWorld (lambda (arg-0 arg-1) (arg-1 #f)))
(define PrimIO-io_pure (lambda (arg-0 arg-1 ext-0) arg-1))
(define PrimIO-io_bind (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (PrimIO-case--io_bind-430 'erased 'erased 'erased arg-3 'erased (arg-2 ext-0))))
(define PrimIO-fromPrim (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Show-case--max-6043 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Show-case--min-6029 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Show-show_Show_Int (lambda (arg-0) (PreludeC-45Show-showPrec_Show_Int (vector 0 ) arg-0)))
(define PreludeC-45Show-showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-min_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45Show-case--min-6029 arg-1 arg-0 (PreludeC-45Show-C-60_Ord_Prec arg-0 arg-1))))
(define PreludeC-45Show-max_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45Show-case--max-6043 arg-1 arg-0 (PreludeC-45Show-C-62_Ord_Prec arg-0 arg-1))))
(define PreludeC-45Show-compare_Ord_Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (PreludeC-45Types-compare_Ord_Nat e-0 e-1)))(else (PreludeC-45EqOrd-compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))(else (PreludeC-45EqOrd-compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))
(define PreludeC-45Show-__Impl_Show_Int (lambda () (vector 0 (lambda (x) (PreludeC-45Show-show_Show_Int x)) (lambda (d) (lambda (x) (PreludeC-45Show-showPrec_Show_Int d x))))))
(define PreludeC-45Show-__Impl_Ord_Prec (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Show-C-61C-61_Eq_Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Show-C-47C-61_Eq_Prec arg-4 arg-5)))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45Show-compare_Ord_Prec arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45Show-C-60_Ord_Prec arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45Show-C-62_Ord_Prec arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45Show-C-60C-61_Ord_Prec arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45Show-C-62C-61_Ord_Prec arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45Show-max_Ord_Prec arg-381 arg-382))) (lambda (arg-383) (lambda (arg-384) (PreludeC-45Show-min_Ord_Prec arg-383 arg-384))))))
(define PreludeC-45Show-__Impl_Eq_Prec (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Show-C-61C-61_Eq_Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Show-C-47C-61_Eq_Prec arg-4 arg-5))))))
(define PreludeC-45Show-C-62_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq_Ordering (PreludeC-45Show-compare_Ord_Prec arg-0 arg-1) 2)))
(define PreludeC-45Show-C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq_Ordering (PreludeC-45Show-compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-C-61C-61_Eq_Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (PreludeC-45Types-C-61C-61_Eq_Nat e-0 e-1)))(else (PreludeC-45EqOrd-C-61C-61_Eq_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))(else (PreludeC-45EqOrd-C-61C-61_Eq_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))
(define PreludeC-45Show-C-60_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq_Ordering (PreludeC-45Show-compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-C-60C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq_Ordering (PreludeC-45Show-compare_Ord_Prec arg-0 arg-1) 2)))
(define PreludeC-45Show-C-47C-61_Eq_Prec (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45Show-C-61C-61_Eq_Prec arg-0 arg-1))))
(define PreludeC-45Show-showPrec (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 1) arg-1) (else (PreludeC-45TypesC-45Strings-C-43C-43 "(" (PreludeC-45TypesC-45Strings-C-43C-43 arg-1 ")")))))))
(define PreludeC-45Show-primNumShow (lambda (arg-0 arg-1 arg-2 arg-3) (let ((str (arg-1 arg-3))) (PreludeC-45Show-showParens (PreludeC-45Basics-C-38C-38 (PreludeC-45Show-C-62C-61_Ord_Prec arg-2 (vector 5 )) (lambda () (PreludeC-45Show-firstCharIs (lambda (arg-4) (PreludeC-45EqOrd-C-61C-61_Eq_Char arg-4 #\-)) str))) str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6)))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 "") 1)(else (arg-0 (string-ref arg-1 0)))))))
(define PreludeC-45IO-pure_Applicative_IO (lambda (arg-0 arg-1 ext-0) arg-1))
(define PreludeC-45IO-map_Functor_IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-3 (arg-3 ext-0))) (arg-2 act-3))))
(define PreludeC-45IO-liftIO_HasIO_IO (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45IO-join_Monad_IO (lambda (arg-0 arg-1 ext-0) (let ((act-2 (arg-1 ext-0))) (act-2 ext-0))))
(define PreludeC-45IO-__Impl_Monad_IO (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-29 (arg-647 eta-0))) (act-29 eta-0))))))))
(define PreludeC-45IO-__Impl_HasIO_IO (lambda () (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7161) arg-7161)))))
(define PreludeC-45IO-__Impl_Functor_IO (lambda (ext-4 ext-1 ext-2 ext-3 ext-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased ext-2 ext-3 ext-0)))
(define PreludeC-45IO-__Impl_Applicative_IO (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor_IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16)))))))))))
(define PreludeC-45IO-__HasIO_C-40MonadC-32ioC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45IO-C-62C-62C-61_Monad_IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-1 (arg-2 ext-0))) ((arg-3 act-1) ext-0))))
(define PreludeC-45IO-C-60C-42C-62_Applicative_IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-6 (arg-2 ext-0))) (let ((act-5 (arg-3 ext-0))) (act-6 act-5)))))
(define PreludeC-45IO-putStrLn (lambda (arg-0 arg-1 arg-2) (PreludeC-45IO-putStr 'erased arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0)))))))
(define PreludeC-45IO-primIO (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) arg-3)))))
(define PreludeC-45IO-liftIO (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define DataC-45List-mergeReplicate (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 arg-1 (vector 1 e-2 (DataC-45List-mergeReplicate 'erased arg-1 e-3))))))))))
(define DataC-45List-intersperse (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (DataC-45List-mergeReplicate 'erased arg-1 e-3)))))))))
(define NetworkC-45SocketC-45Data-show_Show_SocketAddress (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) ((PreludeC-45Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable_List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable_List 'erased 'erased func init input)))))) (lambda (elem) (lambda (arg-821) (PreludeC-45Types-null_Foldable_List 'erased arg-821)))) (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-60C-43C-62_Semigroup_String arg-2 arg-3))) (PreludeC-45Types-neutral_Monoid_String)))) (DataC-45List-intersperse 'erased "." (PreludeC-45Types-map_Functor_List 'erased 'erased (lambda (eta-0) (PreludeC-45Show-show_Show_Int eta-0)) (vector 1 e-0 (vector 1 e-1 (vector 1 e-2 (vector 1 e-3 (vector 0 ))))))))))))) ((1) "NOT IMPLEMENTED YET") ((2) (let ((e-4 (vector-ref sc0 1))) e-4)) (else "Invalid")))))
(define NetworkC-45SocketC-45Data-toCode (lambda (arg-0 arg-1 ext-0) (arg-1 ext-0)))
(define NetworkC-45ZeroMQC-45Data-n--1840-3089-y_mod_2 (lambda (arg-0 arg-1) (PreludeC-45Num-mod_Integral_Int arg-0 2)))
(define NetworkC-45ZeroMQC-45Data-n--1840-3091-y_div_2 (lambda (arg-0 arg-1) (PreludeC-45Num-div_Integral_Int arg-0 2)))
(define NetworkC-45ZeroMQC-45Data-n--1840-3088-x_mod_2 (lambda (arg-0 arg-1) (PreludeC-45Num-mod_Integral_Int arg-1 2)))
(define NetworkC-45ZeroMQC-45Data-n--1840-3090-x_div_2 (lambda (arg-0 arg-1) (PreludeC-45Num-div_Integral_Int arg-1 2)))
(define NetworkC-45ZeroMQC-45Data-toCode_ToCode_NetworkC-46ZeroMQC-46DataC-46SocketType (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) 0) ((2) 1) ((3) 2) ((4) 3) ((5) 4) ((6) 5) ((7) 6) ((8) 7) ((9) 8) ((10) 9) ((11) 10) ((12) 11)(else 100)))))
(define NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flags (lambda (ext-0) (PreludeC-45Types-foldr_Foldable_List 'erased 'erased (lambda (eta-0) (lambda (eta-1) (NetworkC-45ZeroMQC-45Data-bitwise_or eta-0 eta-1))) 0 (PreludeC-45Types-map_Functor_List 'erased 'erased (lambda (eta-0) (NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flag eta-0)) ext-0))))
(define NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flag (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 1) (else 2)))))
(define NetworkC-45ZeroMQC-45Data-show_Show_Protocol (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "tcp") ((1) "ipc") ((2) "inproc") ((3) "pgm") (else "vmci")))))
(define NetworkC-45ZeroMQC-45Data-fromCode_FromCode_ZMQError (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 156384713) (vector 1 (vector 0 ))) ((equal? sc0 156384714) (vector 1 (vector 1 ))) ((equal? sc0 156384715) (vector 1 (vector 2 ))) ((equal? sc0 156384716) (vector 1 (vector 3 ))) ((equal? sc0 156384717) (vector 1 (vector 4 ))) ((equal? sc0 156384718) (vector 1 (vector 5 ))) ((equal? sc0 156384719) (vector 1 (vector 6 ))) ((equal? sc0 156384720) (vector 1 (vector 7 ))) ((equal? sc0 156384721) (vector 1 (vector 8 ))) ((equal? sc0 156384722) (vector 1 (vector 9 ))) ((equal? sc0 156384723) (vector 1 (vector 10 ))) ((equal? sc0 156384724) (vector 1 (vector 11 ))) ((equal? sc0 156384725) (vector 1 (vector 12 ))) ((equal? sc0 156384726) (vector 1 (vector 13 ))) ((equal? sc0 156384727) (vector 1 (vector 14 ))) ((equal? sc0 156384728) (vector 1 (vector 15 ))) ((equal? sc0 156384729) (vector 1 (vector 16 ))) ((equal? sc0 156384730) (vector 1 (vector 17 ))) ((equal? sc0 156384763) (vector 1 (vector 18 ))) ((equal? sc0 156384764) (vector 1 (vector 19 ))) ((equal? sc0 156384765) (vector 1 (vector 20 ))) ((equal? sc0 156384766) (vector 1 (vector 21 )))(else (vector 0 ))))))
(define NetworkC-45ZeroMQC-45Data-__Impl_ToCode_Flags (lambda (ext-0) (NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flags ext-0)))
(define NetworkC-45ZeroMQC-45Data-bitwise_or (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) arg-1)(else (let ((sc0 arg-1)) (cond ((equal? sc0 0) arg-0)(else (b+ (PreludeC-45EqOrd-max_Ord_Int (NetworkC-45ZeroMQC-45Data-n--1840-3088-x_mod_2 arg-1 arg-0) (NetworkC-45ZeroMQC-45Data-n--1840-3089-y_mod_2 arg-1 arg-0)) (b* 2 (NetworkC-45ZeroMQC-45Data-bitwise_or (NetworkC-45ZeroMQC-45Data-n--1840-3090-x_div_2 arg-1 arg-0) (NetworkC-45ZeroMQC-45Data-n--1840-3091-y_div_2 arg-1 arg-0)) 63) 63)))))))))
(define NetworkC-45ZeroMQ-case--recvMany-3964 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)) eta-2 eta-3))))) (lambda (arg-6) (vector 1 arg-4 arg-6)) (NetworkC-45ZeroMQ-recvMany 'erased arg-1 arg-3 arg-2))) (else (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)) (vector 1 arg-4 (vector 0 ))))))))
(define NetworkC-45ZeroMQ-case--recv-3788 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-3 (vector-ref sc2 1))) e-3)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (let ((sc2 arg-1)) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_free_recv_struct arg-4 eta-0)))))) (lambda (_-3813) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 0 e-1)))))))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (let ((sc2 arg-1)) (let ((e-4 (vector-ref sc2 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_get_payload arg-4 eta-0)))))) (lambda (payload) (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-5 (vector-ref sc2 2))) ((((e-5 'erased) 'erased) (let ((sc3 arg-1)) (let ((e-7 (vector-ref sc3 2))) ((e-7 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_free_recv_struct arg-4 eta-0)))))) (lambda (_-3862) (let ((sc3 (let ((sc4 (let ((sc5 arg-1)) (let ((e-8 (vector-ref sc5 1))) e-8)))) (let ((e-9 (vector-ref sc4 1))) e-9)))) (let ((e-8 (vector-ref sc3 2))) ((e-8 'erased) (vector 1 payload)))))))))))))))))
(define NetworkC-45ZeroMQ-case--caseC-32blockC-32inC-32send-3697 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-3 (vector-ref sc3 1))) e-3)))) (let ((e-4 (vector-ref sc2 1))) e-4)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 e-1)))))) (else (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (vector 0 ))))))))))
(define NetworkC-45ZeroMQ-case--send-3653 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (vector 0 )))))) (else (NetworkC-45ZeroMQ-case--caseC-32blockC-32inC-32send-3697 'erased arg-1 arg-2 arg-3 arg-4 arg-5 (NetworkC-45ZeroMQC-45Data-fromCode_FromCode_ZMQError arg-5)))))))
(define NetworkC-45ZeroMQ-withContext (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_ctx_new eta-0)))))) (lambda (context_) (let ((context context_)) (let ((sc1 (let ((sc2 arg-2)) (let ((e-5 (vector-ref sc2 1))) e-5)))) (let ((e-5 (vector-ref sc1 2))) ((((e-5 'erased) 'erased) (arg-3 context)) (lambda (result) (let ((sc2 (let ((sc3 arg-2)) (let ((e-8 (vector-ref sc3 1))) e-8)))) (let ((e-8 (vector-ref sc2 2))) ((((e-8 'erased) 'erased) (let ((sc3 arg-2)) (let ((e-10 (vector-ref sc3 2))) ((e-10 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_ctx_destroy context eta-0)))))) (lambda (_-3471) (let ((sc3 (let ((sc4 (let ((sc5 arg-2)) (let ((e-11 (vector-ref sc5 1))) e-11)))) (let ((e-12 (vector-ref sc4 1))) e-12)))) (let ((e-11 (vector-ref sc3 2))) ((e-11 'erased) result))))))))))))))))))
(define NetworkC-45ZeroMQ-socket (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_socket arg-2 (NetworkC-45ZeroMQC-45Data-toCode_ToCode_NetworkC-46ZeroMQC-46DataC-46SocketType arg-3) eta-0)))))) (lambda (s) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) s)))))))))
(define NetworkC-45ZeroMQC-45Socket-sock (lambda (arg-0) arg-0))
(define NetworkC-45ZeroMQ-sendMany (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (vector 0 )))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (NetworkC-45ZeroMQ-send 'erased arg-1 arg-2 e-2 arg-4))(else (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)) (NetworkC-45ZeroMQ-send 'erased arg-1 arg-2 e-2 (vector 1 (vector 1 ) arg-4)) (lambda (firstPart) (NetworkC-45ZeroMQ-sendMany 'erased arg-1 arg-2 e-3 arg-4)))))))))))))
(define NetworkC-45ZeroMQ-send (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_send arg-2 arg-3 (NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flags arg-4) eta-0)))))) (lambda (return_code) (NetworkC-45ZeroMQ-case--send-3653 'erased arg-1 arg-4 arg-3 arg-2 return_code (PreludeC-45EqOrd-C-61C-61_Eq_Int return_code 0))))))))
(define NetworkC-45ZeroMQ-recvMany (lambda (arg-0 arg-1 arg-2 arg-3) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) (NetworkC-45ZeroMQ-recv 'erased arg-1 arg-2 arg-3) (lambda (firstPart) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) (NetworkC-45ZeroMQ-moreToReceive 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Either-C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Either-join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-647)))) (lambda (a) (lambda (arg-7161) (ControlC-45MonadC-45Either-liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased arg-1 arg-7161)))) arg-2) (lambda (more) (let ((sc0 more)) (cond ((equal? sc0 0) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)) eta-2 eta-3))))) (lambda (arg-4) (vector 1 firstPart arg-4)) (NetworkC-45ZeroMQ-recvMany 'erased arg-1 arg-2 arg-3))) (else (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)) (vector 1 firstPart (vector 0 ))))))))))))
(define NetworkC-45ZeroMQ-recv (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_recv arg-2 (NetworkC-45ZeroMQC-45Data-toCode_ToCode_Flags arg-3) eta-0)))))) (lambda (recv_response) (let ((sc1 (let ((sc2 arg-1)) (let ((e-5 (vector-ref sc2 1))) e-5)))) (let ((e-5 (vector-ref sc1 2))) ((((e-5 'erased) 'erased) (let ((sc2 arg-1)) (let ((e-7 (vector-ref sc2 2))) ((e-7 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_get_result_code recv_response eta-0)))))) (lambda (return_code) (NetworkC-45ZeroMQ-case--recv-3788 'erased arg-1 arg-3 arg-2 recv_response return_code (NetworkC-45ZeroMQC-45Data-fromCode_FromCode_ZMQError return_code))))))))))))
(define NetworkC-45ZeroMQ-moreToReceive (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_more_to_receive arg-2 eta-0)))))) (lambda (result) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (PreludeC-45EqOrd-C-47C-61_Eq_Int result 0))))))))))
(define NetworkC-45ZeroMQC-45Context-ctx (lambda (arg-0) arg-0))
(define NetworkC-45ZeroMQ-connect (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_connect arg-2 (NetworkC-45ZeroMQC-45Data-show_Show_Protocol arg-3) (NetworkC-45SocketC-45Data-show_Show_SocketAddress arg-4) arg-5 eta-0)))))) (lambda (return_code) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (PreludeC-45EqOrd-C-61C-61_Eq_Int return_code 0))))))))))
(define NetworkC-45ZeroMQ-close (lambda (arg-0 arg-1 ext-0) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-1) (NetworkC-45ZeroMQC-45Internal-prim__idris_zmq_close ext-0 eta-1)))))))
(define ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 ext-0))))))
(define ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased arg-4 (lambda (eta-0) (let ((sc0 eta-0)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-5 e-5))))))) arg-6)))
(define ControlC-45MonadC-45Either-liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (let ((act-8 (arg-4 eta-0))) (vector 1 act-8))))))))
(define ControlC-45MonadC-45Either-join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased arg-3 arg-4 (lambda (eta-0) eta-0))))
(define ControlC-45MonadC-45Either-__Impl_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2) (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Either-C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased arg-2 arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Either-join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased arg-2 arg-647))))))
(define ControlC-45MonadC-45Either-__Impl_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2) (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Either-C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Either-join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-647)))) (lambda (a) (lambda (arg-7161) (ControlC-45MonadC-45Either-liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased arg-2 arg-7161))))))
(define ControlC-45MonadC-45Either-__Impl_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 ext-0 ext-1 ext-2 ext-3) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased arg-2 ext-2 ext-3)))
(define ControlC-45MonadC-45Either-__Impl_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2) (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Either-map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Either-pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased arg-2 arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Either-C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 'erased 'erased 'erased 'erased arg-2 arg-483 arg-485))))))))
(define ControlC-45MonadC-45Either-C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) arg-5) (lambda (eta-0) (PreludeC-45Types-either 'erased 'erased 'erased (lambda () (lambda (eta-1) (let ((sc1 (let ((sc2 arg-4)) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (vector 0 eta-1)))))) (lambda () (lambda (eta-1) (arg-6 eta-1))) eta-0)))))))
(define ControlC-45MonadC-45Either-C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (let ((e-3 (vector-ref sc0 3))) ((((e-3 'erased) 'erased) (let ((sc1 arg-4)) (let ((e-4 (vector-ref sc1 3))) ((((e-4 'erased) 'erased) (let ((sc2 arg-4)) (let ((e-8 (vector-ref sc2 2))) ((e-8 'erased) (lambda (arg-7) (lambda (arg-8) (let ((sc3 arg-7)) (case (vector-ref sc3 0) ((0) (let ((e-10 (vector-ref sc3 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc3 1))) (let ((sc4 arg-8)) (case (vector-ref sc4 0) ((1) (let ((e-11 (vector-ref sc4 1))) (vector 1 (e-10 e-11)))) (else (let ((e-11 (vector-ref sc4 1))) (vector 0 e-11))))))))))))))) arg-5)))) arg-6)))))
(define ControlC-45MonadC-45Either-runEitherT (lambda (arg-0 arg-1 arg-2 arg-3) arg-3))
(load-shared-object "libidris2_support.so")
(load-shared-object "libidris2_zmq.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO 'erased (Main-main))(collect 4)
(blodwen-run-finalisers))
